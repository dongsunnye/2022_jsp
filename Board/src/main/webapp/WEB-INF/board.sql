--게시판DB
--회원 등급테이블
CREATE TABLE GRADE(
    GRADE_NO NUMBER(1) PRIMARY KEY,
    GRADE_NAME VARCHAR2(20 BYTE)
);
--회원 테이블
--아이디, 암호, 이름, 닉네임, 회원등급
CREATE TABLE BOARD_MEMBER(
    ID VARCHAR2(30 BYTE) PRIMARY KEY,
    PASSWD VARCHAR2(50 BYTE),
    NAME VARCHAR2(30 BYTE),
    NICK VARCHAR2(30 BYTE),
    GRADE_NO NUMBER(1)
);
ALTER TABLE BOARD_MEMBER ADD CONSTRAINT FK_GRADE_NO FOREIGN KEY(GRADE_NO)
REFERENCES GRADE(GRADE_NO) ON DELETE SET NULL;

--게시판 테이블
--글번호, 제목, 작성자, 작성일, 조회수, 내용
CREATE TABLE BOARD(
    BNO NUMBER PRIMARY KEY,
    TITLE VARCHAR2(60 BYTE),
    WRITER VARCHAR2(30 BYTE),
    BDATE DATE DEFAULT SYSDATE,
    BCOUNT NUMBER,
    CONTENT VARCHAR2(1000 BYTE),
    CONSTRAINT FK_WRITER FOREIGN KEY(WRITER) REFERENCES BOARD_MEMBER(ID)
);
ALTER TABLE BOARD DROP CONSTRAINT FK_WRITER;
ALTER TABLE BOARD ADD CONSTRAINT FK_WRITER 
FOREIGN KEY(WRITER) REFERENCES BOARD_MEMBER(ID) ON DELETE CASCADE;

--글번호 시퀸스
CREATE SEQUENCE BOARD_BNO START WITH 1 NOMAXVALUE;

--좋아요 테이블
--게시글 번호, 회원아이디
CREATE TABLE BOARD_LIKE(
    BNO NUMBER,
    ID VARCHAR2(30 BYTE),
    CONSTRAINT BOARD_LIKE_PK PRIMARY KEY(BNO, ID),
    CONSTRAINT BOARD_LIKE_ID_FK FOREIGN KEY(ID) REFERENCES BOARD_MEMBER(ID),
    CONSTRAINT BOARD_LIKE_BNO_FK FOREIGN KEY(BNO) REFERENCES BOARD(BNO)
);
ALTER TABLE BOARD_LIKE DROP CONSTRAINT BOARD_LIKE_ID_FK;
ALTER TABLE BOARD_LIKE DROP CONSTRAINT BOARD_LIKE_BNO_FK;
ALTER TABLE BOARD_LIKE ADD CONSTRAINT BOARD_LIKE_ID_FK FOREIGN KEY(ID)
REFERENCES BOARD_MEMBER(ID) ON DELETE CASCADE;
ALTER TABLE BOARD_LIKE ADD CONSTRAINT BOARD_LIKE_BNO_FK FOREIGN KEY(BNO)
REFERENCES BOARD(BNO) ON DELETE CASCADE;
--싫어요 테이블
--게시글 번호, 회원아이디
CREATE TABLE BOARD_HATE(
    BNO NUMBER,
    ID VARCHAR2(30 BYTE),
    CONSTRAINT BOARD_HATE_PK PRIMARY KEY(BNO, ID),
    CONSTRAINT BOARD_HATE_ID_FK FOREIGN KEY(ID) REFERENCES BOARD_MEMBER(ID),
    CONSTRAINT BOARD_HATE_BNO_FK FOREIGN KEY(BNO) REFERENCES BOARD(BNO)
); 
--제약조건 수정
ALTER TABLE BOARD_HATE DROP CONSTRAINT BOARD_HATE_ID_FK;
ALTER TABLE BOARD_HATE DROP CONSTRAINT BOARD_HATE_BNO_FK;
ALTER TABLE BOARD_HATE ADD CONSTRAINT BOARD_HATE_ID_FK FOREIGN KEY(ID)
REFERENCES BOARD_MEMBER(ID) ON DELETE CASCADE;
ALTER TABLE BOARD_HATE ADD CONSTRAINT BOARD_HATE_BNO_FK FOREIGN KEY(BNO)
REFERENCES BOARD(BNO) ON DELETE CASCADE;
--댓글 테이블
--댓글번호, 작성자, 내용, 작성시간, 게시글번호
CREATE TABLE BOARD_COMMENT(
    CNO NUMBER PRIMARY KEY,
    CONTETNT VARCHAR2(500 BYTE),
    CDATE DATE DEFAULT SYSDATE,
    BNO NUMBER,
    WRITER VARCHAR2(30 BYTE)
);
--외래키
ALTER TABLE BOARD_COMMENT DROP CONSTRAINT BOARD_COMMENT_FK;
ALTER TABLE BOARD_COMMENT ADD CONSTRAINT BOARD_COMMENT_FK 
FOREIGN KEY(WRITER) REFERENCES BOARD_MEMBER(ID) ON DELETE CASCADE;

--댓글 번호 시퀸스
CREATE SEQUENCE BOARD_COMMENT_CNO START WITH 1 NOMAXVALUE;

INSERT INTO BOARD_COMMENT(CNO,CONTETNT,BNO,WRITER) VALUES(BOARD_COMMENT_CNO.NEXTVAL,'댓글내용',
83,'A0001');


--댓글 좋아요 테이블
--댓글 번호, 회원아이디
CREATE TABLE BOARD_COMMENT_LIKE(
    CNO NUMBER,
    ID VARCHAR2(30 BYTE),
    CONSTRAINT BOARD_COMMENT_LIKE_PK PRIMARY KEY(CNO, ID),
    CONSTRAINT BOARD_COMMENT_LIKE_ID_FK FOREIGN KEY(ID) REFERENCES BOARD_MEMBER(ID),
    CONSTRAINT BOARD_COMMENT_LIKE_CNO_FK FOREIGN KEY(CNO) REFERENCES BOARD_COMMENT(CNO)
);
ALTER TABLE BOARD_COMMENT_LIKE DROP CONSTRAINT BOARD_COMMENT_LIKE_ID_FK;
ALTER TABLE BOARD_COMMENT_LIKE ADD  CONSTRAINT BOARD_COMMENT_LIKE_ID_FK 
FOREIGN KEY(ID) REFERENCES BOARD_MEMBER(ID) ON DELETE CASCADE;

ALTER TABLE BOARD_COMMENT_LIKE DROP CONSTRAINT BOARD_COMMENT_LIKE_CNO_FK;
ALTER TABLE BOARD_COMMENT_LIKE ADD  CONSTRAINT BOARD_COMMENT_LIKE_CNO_FK 
FOREIGN KEY(CNO) REFERENCES BOARD_COMMENT(CNO) ON DELETE CASCADE;
--댓글 싫어요 테이블
--댓글 번호, 회원아이디
CREATE TABLE BOARD_COMMENT_HATE(
    CNO NUMBER,
    ID VARCHAR2(30 BYTE),
    CONSTRAINT BOARD_COMMENT_HATE_PK PRIMARY KEY(CNO, ID),
    CONSTRAINT BOARD_COMMENT_HATE_ID_FK FOREIGN KEY(ID) REFERENCES BOARD_MEMBER(ID),
    CONSTRAINT BOARD_COMMENT_HATE_CNO_FK FOREIGN KEY(CNO) REFERENCES BOARD_COMMENT(CNO)
);
ALTER TABLE BOARD_COMMENT_HATE DROP CONSTRAINT BOARD_COMMENT_HATE_ID_FK;
ALTER TABLE BOARD_COMMENT_HATE ADD  CONSTRAINT BOARD_COMMENT_HATE_ID_FK 
FOREIGN KEY(ID) REFERENCES BOARD_MEMBER(ID) ON DELETE CASCADE;

ALTER TABLE BOARD_COMMENT_HATE DROP CONSTRAINT BOARD_COMMENT_HATE_CNO_FK;
ALTER TABLE BOARD_COMMENT_HATE ADD  CONSTRAINT BOARD_COMMENT_HATE_CNO_FK 
FOREIGN KEY(CNO) REFERENCES BOARD_COMMENT(CNO) ON DELETE CASCADE;


CREATE OR REPLACE VIEW BOARD_COMMENT_VIEW
AS
SELECT BC.CNO, BC.BNO, BC.CONTETNT, BC.WRITER, BC.CDATE,
(SELECT COUNT(*) FROM BOARD_COMMENT_LIKE WHERE BNO = BC.BNO) AS CLIKE,
(SELECT COUNT(*) FROM BOARD_COMMENT_HATE WHERE BNO = BC.BNO) AS CHATE
FROM BOARD_COMMENT BC;

SELECT * FROM BOARD_COMMENT_VIEW WHERE BNO = 83;
	
--로그인
SELECT * FROM BOARD_MEMBER, GRADE WHERE  GRADE.GRADE_NO = BOARD_MEMBER.GRADE_NO ;

--게시글 목록 조회
--글번호, 제목, 작성자, 닉네임, 조회수, 작성일, 좋아요, 싫어요
SELECT B.BNO, B.TITLE, B.WRITER, BM.NICK, B.BCOUNT, B.BDATE,
(SELECT COUNT(*) FROM BOARD_LIKE BL WHERE BL.BNO = B.BNO) AS BLIKE,
(SELECT COUNT(*) FROM BOARD_HATE BH WHERE BH.BNO = B.BNO) AS BHATE
FROM BOARD B, BOARD_MEMBER BM
WHERE B.WRITER = BM.ID ORDER BY BNO DESC;

CREATE OR REPLACE VIEW BOARD_VIEW
AS 
SELECT B.BNO, B.TITLE, B.WRITER, BM.NICK, B.BCOUNT, B.BDATE,
(SELECT COUNT(*) FROM BOARD_LIKE BL WHERE BL.BNO = B.BNO) AS BLIKE,
(SELECT COUNT(*) FROM BOARD_HATE BH WHERE BH.BNO = B.BNO) AS BHATE,
CONTENT
FROM BOARD B, BOARD_MEMBER BM
WHERE B.WRITER = BM.ID ORDER BY BNO DESC;

SELECT * FROM (SELECT CEIL(ROWNUM / 15) AS PAGENO, B.* FROM BOARD_VIEW B)
WHERE PAGENO = 1;

SELECT * FROM BOARD_VIEW WHERE BNO = 23;

--전체 게시글 개수
SELECT COUNT(*) FROM BOARD_VIEW;
--게시글 등록
INSERT INTO BOARD(BNO, TITLE, WRITER, CONTENT, BCOUNT) 
VALUES(BOARD_BNO.NEXTVAL,'제목','A0001','내용',0);

INSERT INTO BOARD(BNO, TITLE, WRITER, CONTENT, BCOUNT) VALUES(BOARD_BNO.NEXTVAL,?,?,?,0);

SELECT B.BNO, B.TITLE, B.WRITER, BM.NICK, B.BCOUNT, B.BDATE,
(SELECT COUNT(*) FROM BOARD_LIKE BL WHERE BL.BNO = B.BNO) AS BLIKE,
(SELECT COUNT(*) FROM BOARD_HATE BH WHERE BH.BNO = B.BNO) AS BHATE,
CONTENT
FROM BOARD B, BOARD_MEMBER BM
WHERE B.WRITER = BM.ID AND B.BNO = 23 ORDER BY BNO DESC;

UPDATE BOARD SET BCOUNT = BCOUNT + 1 WHERE BNO = 81;








